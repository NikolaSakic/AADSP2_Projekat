1     	 0000					.public _InputGain
2     	 0000					.public _history_global
3     	 0000					.public _outputSampleBuffer
4     	 0000					.public _p_state_global
5     	 0000					.public _sampleBuffer
6     	 0000					.extern _cl_wavread_bits_per_sample
7     	 0000					.extern _cl_wavread_close
8     	 0000					.extern _cl_wavread_frame_rate
9     	 0000					.extern _cl_wavread_getnchannels
10    	 0000					.extern _cl_wavread_number_of_frames
11    	 0000					.extern _cl_wavread_open
12    	 0000					.extern _cl_wavread_recvsample
13    	 0000					.extern _cl_wavwrite_close
14    	 0000					.extern _cl_wavwrite_open
15    	 0000					.extern _cl_wavwrite_sendsample
16    	 0000					.public _main
17    	 0000					.extern _printf
18    	 0000					.extern _processing
19    	 0000					.extern _strcpy
20    	 0000					.extern __div
21    							.xdata_ovly
21     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
22    	 0000				_InputGain
23    	 0000					.bss (0x1)
24    							.xdata_ovly align 128
24     >> start of macro: .xdata_ovly align
1+    									seg_align , "X_OVLY", X, 128
1+     >> start of macro: seg_align
1+    						    SEGMENT "X_OVLY" ALIGN( 128 )
2+    						  .if "" != ""
3+    						___SegStart_X_
4+    						  .endif
5+    							#RememberSegmentType
6+     >> end of macro: seg_align
2+     >> end of macro: .xdata_ovly align
25    	 0000				_history_global
26    	 0000					.bss (0x100)
27    							.xdata_ovly
27     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
28    	 0000				_outputSampleBuffer
29    	 0000					.bss (0x80)
30    							.xdata_ovly
30     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
31    	 0000				_p_state_global
32    	 0000					.bss (0x2)
33    							.ydata_ovly
33     >> start of macro: .ydata_ovly
1+    									seg_single , "Y_OVLY", Y
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_Y_ )
2+    						    segment
3+    						  .else
4+    						    segment "Y_OVLY"
5+    							.if "" != ""
6+    						___SegStart_Y_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .ydata_ovly
34    	 0000				_sampleBuffer
35    	 0000					.bss (0x80)
36    							.xdata_ovly
36     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
37    	 0000				_string_const_0
38    	 0000					.dw  (0x2e)
	 0000	 0000002E	 
39    	 0001					.dw  (0x2e)
	 0001	 0000002E	 
40    	 0002					.dw  (0x2f)
	 0002	 0000002F	 
41    	 0003					.dw  (0x2e)
	 0003	 0000002E	 
42    	 0004					.dw  (0x2e)
	 0004	 0000002E	 
43    	 0005					.dw  (0x2f)
	 0005	 0000002F	 
44    	 0006					.dw  (0x54)
	 0006	 00000054	 
45    	 0007					.dw  (0x65)
	 0007	 00000065	 
46    	 0008					.dw  (0x73)
	 0008	 00000073	 
47    	 0009					.dw  (0x74)
	 0009	 00000074	 
48    	 000A					.dw  (0x53)
	 000A	 00000053	 
49    	 000B					.dw  (0x74)
	 000B	 00000074	 
50    	 000C					.dw  (0x72)
	 000C	 00000072	 
51    	 000D					.dw  (0x65)
	 000D	 00000065	 
52    	 000E					.dw  (0x61)
	 000E	 00000061	 
53    	 000F					.dw  (0x6d)
	 000F	 0000006D	 
54    	 0010					.dw  (0x73)
	 0010	 00000073	 
55    	 0011					.dw  (0x2f)
	 0011	 0000002F	 
56    	 0012					.dw  (0x4d)
	 0012	 0000004D	 
57    	 0013					.dw  (0x79)
	 0013	 00000079	 
58    	 0014					.dw  (0x57)
	 0014	 00000057	 
59    	 0015					.dw  (0x68)
	 0015	 00000068	 
60    	 0016					.dw  (0x69)
	 0016	 00000069	 
61    	 0017					.dw  (0x74)
	 0017	 00000074	 
62    	 0018					.dw  (0x65)
	 0018	 00000065	 
63    	 0019					.dw  (0x4e)
	 0019	 0000004E	 
64    	 001A					.dw  (0x6f)
	 001A	 0000006F	 
65    	 001B					.dw  (0x69)
	 001B	 00000069	 
66    	 001C					.dw  (0x73)
	 001C	 00000073	 
67    	 001D					.dw  (0x65)
	 001D	 00000065	 
68    	 001E					.dw  (0x2e)
	 001E	 0000002E	 
69    	 001F					.dw  (0x77)
	 001F	 00000077	 
70    	 0020					.dw  (0x61)
	 0020	 00000061	 
71    	 0021					.dw  (0x76)
	 0021	 00000076	 
72    	 0022					.dw  (0x0)
	 0022	 00000000	 
73    							.xdata_ovly
73     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
74    	 0000				_string_const_1
75    	 0000					.dw  (0x45)
	 0000	 00000045	 
76    	 0001					.dw  (0x72)
	 0001	 00000072	 
77    	 0002					.dw  (0x72)
	 0002	 00000072	 
78    	 0003					.dw  (0x6f)
	 0003	 0000006F	 
79    	 0004					.dw  (0x72)
	 0004	 00000072	 
80    	 0005					.dw  (0x3a)
	 0005	 0000003A	 
81    	 0006					.dw  (0x20)
	 0006	 00000020	 
82    	 0007					.dw  (0x43)
	 0007	 00000043	 
83    	 0008					.dw  (0x6f)
	 0008	 0000006F	 
84    	 0009					.dw  (0x75)
	 0009	 00000075	 
85    	 000A					.dw  (0x6c)
	 000A	 0000006C	 
86    	 000B					.dw  (0x64)
	 000B	 00000064	 
87    	 000C					.dw  (0x20)
	 000C	 00000020	 
88    	 000D					.dw  (0x6e)
	 000D	 0000006E	 
89    	 000E					.dw  (0x6f)
	 000E	 0000006F	 
90    	 000F					.dw  (0x74)
	 000F	 00000074	 
91    	 0010					.dw  (0x20)
	 0010	 00000020	 
92    	 0011					.dw  (0x6f)
	 0011	 0000006F	 
93    	 0012					.dw  (0x70)
	 0012	 00000070	 
94    	 0013					.dw  (0x65)
	 0013	 00000065	 
95    	 0014					.dw  (0x6e)
	 0014	 0000006E	 
96    	 0015					.dw  (0x20)
	 0015	 00000020	 
97    	 0016					.dw  (0x69)
	 0016	 00000069	 
98    	 0017					.dw  (0x6e)
	 0017	 0000006E	 
99    	 0018					.dw  (0x70)
	 0018	 00000070	 
100   	 0019					.dw  (0x75)
	 0019	 00000075	 
101   	 001A					.dw  (0x74)
	 001A	 00000074	 
102   	 001B					.dw  (0x20)
	 001B	 00000020	 
103   	 001C					.dw  (0x77)
	 001C	 00000077	 
104   	 001D					.dw  (0x61)
	 001D	 00000061	 
105   	 001E					.dw  (0x76)
	 001E	 00000076	 
106   	 001F					.dw  (0x65)
	 001F	 00000065	 
107   	 0020					.dw  (0x66)
	 0020	 00000066	 
108   	 0021					.dw  (0x69)
	 0021	 00000069	 
109   	 0022					.dw  (0x6c)
	 0022	 0000006C	 
110   	 0023					.dw  (0x65)
	 0023	 00000065	 
111   	 0024					.dw  (0x2e)
	 0024	 0000002E	 
112   	 0025					.dw  (0xa)
	 0025	 0000000A	 
113   	 0026					.dw  (0x0)
	 0026	 00000000	 
114   							.xdata_ovly
114    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
115   	 0000				_string_const_2
116   	 0000					.dw  (0x2e)
	 0000	 0000002E	 
117   	 0001					.dw  (0x2e)
	 0001	 0000002E	 
118   	 0002					.dw  (0x2f)
	 0002	 0000002F	 
119   	 0003					.dw  (0x4f)
	 0003	 0000004F	 
120   	 0004					.dw  (0x75)
	 0004	 00000075	 
121   	 0005					.dw  (0x74)
	 0005	 00000074	 
122   	 0006					.dw  (0x53)
	 0006	 00000053	 
123   	 0007					.dw  (0x74)
	 0007	 00000074	 
124   	 0008					.dw  (0x72)
	 0008	 00000072	 
125   	 0009					.dw  (0x65)
	 0009	 00000065	 
126   	 000A					.dw  (0x61)
	 000A	 00000061	 
127   	 000B					.dw  (0x6d)
	 000B	 0000006D	 
128   	 000C					.dw  (0x73)
	 000C	 00000073	 
129   	 000D					.dw  (0x2f)
	 000D	 0000002F	 
130   	 000E					.dw  (0x6d)
	 000E	 0000006D	 
131   	 000F					.dw  (0x79)
	 000F	 00000079	 
132   	 0010					.dw  (0x57)
	 0010	 00000057	 
133   	 0011					.dw  (0x68)
	 0011	 00000068	 
134   	 0012					.dw  (0x69)
	 0012	 00000069	 
135   	 0013					.dw  (0x74)
	 0013	 00000074	 
136   	 0014					.dw  (0x65)
	 0014	 00000065	 
137   	 0015					.dw  (0x4e)
	 0015	 0000004E	 
138   	 0016					.dw  (0x6f)
	 0016	 0000006F	 
139   	 0017					.dw  (0x69)
	 0017	 00000069	 
140   	 0018					.dw  (0x73)
	 0018	 00000073	 
141   	 0019					.dw  (0x65)
	 0019	 00000065	 
142   	 001A					.dw  (0x2e)
	 001A	 0000002E	 
143   	 001B					.dw  (0x77)
	 001B	 00000077	 
144   	 001C					.dw  (0x61)
	 001C	 00000061	 
145   	 001D					.dw  (0x76)
	 001D	 00000076	 
146   	 001E					.dw  (0x0)
	 001E	 00000000	 
147   							.xdata_ovly
147    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
148   	 0000				_string_const_3
149   	 0000					.dw  (0x45)
	 0000	 00000045	 
150   	 0001					.dw  (0x72)
	 0001	 00000072	 
151   	 0002					.dw  (0x72)
	 0002	 00000072	 
152   	 0003					.dw  (0x6f)
	 0003	 0000006F	 
153   	 0004					.dw  (0x72)
	 0004	 00000072	 
154   	 0005					.dw  (0x3a)
	 0005	 0000003A	 
155   	 0006					.dw  (0x20)
	 0006	 00000020	 
156   	 0007					.dw  (0x43)
	 0007	 00000043	 
157   	 0008					.dw  (0x6f)
	 0008	 0000006F	 
158   	 0009					.dw  (0x75)
	 0009	 00000075	 
159   	 000A					.dw  (0x6c)
	 000A	 0000006C	 
160   	 000B					.dw  (0x64)
	 000B	 00000064	 
161   	 000C					.dw  (0x20)
	 000C	 00000020	 
162   	 000D					.dw  (0x6e)
	 000D	 0000006E	 
163   	 000E					.dw  (0x6f)
	 000E	 0000006F	 
164   	 000F					.dw  (0x74)
	 000F	 00000074	 
165   	 0010					.dw  (0x20)
	 0010	 00000020	 
166   	 0011					.dw  (0x6f)
	 0011	 0000006F	 
167   	 0012					.dw  (0x70)
	 0012	 00000070	 
168   	 0013					.dw  (0x65)
	 0013	 00000065	 
169   	 0014					.dw  (0x6e)
	 0014	 0000006E	 
170   	 0015					.dw  (0x20)
	 0015	 00000020	 
171   	 0016					.dw  (0x6f)
	 0016	 0000006F	 
172   	 0017					.dw  (0x75)
	 0017	 00000075	 
173   	 0018					.dw  (0x74)
	 0018	 00000074	 
174   	 0019					.dw  (0x70)
	 0019	 00000070	 
175   	 001A					.dw  (0x75)
	 001A	 00000075	 
176   	 001B					.dw  (0x74)
	 001B	 00000074	 
177   	 001C					.dw  (0x20)
	 001C	 00000020	 
178   	 001D					.dw  (0x77)
	 001D	 00000077	 
179   	 001E					.dw  (0x61)
	 001E	 00000061	 
180   	 001F					.dw  (0x76)
	 001F	 00000076	 
181   	 0020					.dw  (0x65)
	 0020	 00000065	 
182   	 0021					.dw  (0x66)
	 0021	 00000066	 
183   	 0022					.dw  (0x69)
	 0022	 00000069	 
184   	 0023					.dw  (0x6c)
	 0023	 0000006C	 
185   	 0024					.dw  (0x65)
	 0024	 00000065	 
186   	 0025					.dw  (0x2e)
	 0025	 0000002E	 
187   	 0026					.dw  (0xa)
	 0026	 0000000A	 
188   	 0027					.dw  (0x0)
	 0027	 00000000	 
189   							.code_ovly
189    >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
190   						
191   						
192   						
193   							# This construction should ensure linking of crt0 in case when target is a standalone program without the OS
194   							.if defined(_OVLY_)
195   								.if .strcmp('standalone',_OVLY_)=0
196   								.if .strcmp('crystal32',_TARGET_FAMILY_)=0
197   	 0000							.extern __start         # dummy use of __start to force linkage of crt0
198   	 0000				dummy		.equ(__start)
199   								.else
200   									.extern __intvec         # dummy use of __intvec to force linkage of intvec
201   						dummy		.equ(__intvec)
202   								.endif
203   								.endif
204   							.endif
205   						
206   	 0000				_main:			/* LN: 20 | CYCLE: 0 | RULES: () */ 
207   	 0000	 BB540007		xmem[i7] = i7			# LN: 20 | 
208   	 0001	 020F7FFF		i7 += 1			# LN: 20 | 
209   	 0002	 8775020E		i7 = i7 + (0x20e)			# LN: 20 | 
210   	 0003	 91750001		i1 = i7 - (0x1)			# LN: 20 | 
211   	 0004	 98540001		xmem[i1] = a0h			# LN: 20 | 
212   	 0005	 91750002		i1 = i7 - (0x2)			# LN: 20 | 
213   	 0006	 B0540001		xmem[i1] = i0			# LN: 20 | 
214   	 0007				cline_20_0:			/* LN: 34 | CYCLE: 0 | RULES: () */ 
215   	 0007	 90750003		i0 = i7 - (0x3)			# LN: 34 | 
216   	 0008	 00004DC0		a0 = 0			# LN: 34 | 
217   	 0009	 98540000		xmem[i0] = a0h			# LN: 34 | 
218   	 000A	 A0050000		i0 = (0) + (_history_global + 0)			# LN: 34 | 
219   	 000B	 88000013		do (0x80), label_end_92			# LN: 34 | 
220   	 000C				label_begin_92:			/* LN: 34 | CYCLE: 0 | RULES: () */ 
221   	 000C	 00004DC0		a0 = 0			# LN: 34 | 
222   	 000D	 98540000		xmem[i0] = a0h			# LN: 34 | 
223   	 000E				init_latch_label_0:			/* LN: 34 | CYCLE: 0 | RULES: () */ 
224   	 000E	 91750003		i1 = i7 - (0x3)			# LN: 34 | 
225   	 000F	 88140001		a0 = xmem[i1]			# LN: 34 | 
226   	 0010	 894A0001		uhalfword(a1) = (0x1)			# LN: 34 | 
227   	 0011	 02084408		i0 += 1; a0 = a0 + a1			# LN: 34, 34 | 
228   	 0012	 91750003		i1 = i7 - (0x3)			# LN: 34 | 
229   	 0013				label_end_92:			# LN: 34 | CYCLE: 5 | RULES: ()
230   	 0013	 98540001		xmem[i1] = a0h			# LN: 34 | 
231   	 0014				cline_34_0:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
232   	 0014				for_end_0:			/* LN: 34 | CYCLE: 0 | RULES: () */ 
233   	 0014	 90750003		i0 = i7 - (0x3)			# LN: 35 | 
234   	 0015	 00004DC0		a0 = 0			# LN: 35 | 
235   	 0016	 98540000		xmem[i0] = a0h			# LN: 35 | 
236   	 0017	 A0050080		i0 = (0) + (_history_global + 128)			# LN: 35 | 
237   	 0018	 88000020		do (0x80), label_end_93			# LN: 35 | 
238   	 0019				label_begin_93:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
239   	 0019	 00004DC0		a0 = 0			# LN: 35 | 
240   	 001A	 98540000		xmem[i0] = a0h			# LN: 35 | 
241   	 001B				init_latch_label_1:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
242   	 001B	 91750003		i1 = i7 - (0x3)			# LN: 35 | 
243   	 001C	 88140001		a0 = xmem[i1]			# LN: 35 | 
244   	 001D	 894A0001		uhalfword(a1) = (0x1)			# LN: 35 | 
245   	 001E	 02084408		i0 += 1; a0 = a0 + a1			# LN: 35, 35 | 
246   	 001F	 91750003		i1 = i7 - (0x3)			# LN: 35 | 
247   	 0020				label_end_93:			# LN: 35 | CYCLE: 5 | RULES: ()
248   	 0020	 98540001		xmem[i1] = a0h			# LN: 35 | 
249   	 0021				cline_35_0:			/* LN: 36 | CYCLE: 0 | RULES: () */ 
250   	 0021				for_end_1:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
251   	 0021	 00004DC0		a0 = 0			# LN: 36 | 
252   	 0022	 98440000		xmem[_p_state_global + 0] = a0h			# LN: 36 | 
253   	 0023				cline_36_0:			/* LN: 37 | CYCLE: 0 | RULES: () */ 
254   	 0023	 00004DC0		a0 = 0			# LN: 37 | 
255   	 0024	 98440001		xmem[_p_state_global + 1] = a0h			# LN: 37 | 
256   	 0025				cline_37_0:			/* LN: 41 | CYCLE: 0 | RULES: () */ 
257   	 0025	 90750103		i0 = i7 - (259 - 0)			# LN: 41 | 
258   	 0026	 A1050000		i1 = (0) + (_string_const_0)			# LN: 41 | 
259   	 0027	 80880000		call (_strcpy)			# LN: 41 | 
260   	 0028				cline_41_0:			/* LN: 42 | CYCLE: 0 | RULES: () */ 
261   	 0028	 90750103		i0 = i7 - (259 - 0)			# LN: 42 | 
262   	 0029	 80880000		call (_cl_wavread_open)			# LN: 42 | 
263   	 002A	 98090030		AnyReg(i0, a0h)			# LN: 42 | 
264   	 002B	 91750104		i1 = i7 - (0x104)			# LN: 42 | 
265   	 002C	 B0540001		xmem[i1] = i0			# LN: 42 | 
266   	 002D				cline_42_0:			/* LN: 43 | CYCLE: 0 | RULES: () */ 
267   	 002D	 90750104		i0 = i7 - (0x104)			# LN: 43 | 
268   	 002E	 88140000		a0 = xmem[i0]			# LN: 43 | 
269   	 002F	 00004E80		a0 & a0			# LN: 43 | 
270   	 0030	 84480035		if (a != 0) jmp (else_0)			# LN: 43 | 
271   	 0031				cline_43_0:			/* LN: 45 | CYCLE: 0 | RULES: () */ 
272   	 0031	 A0050000		i0 = (0) + (_string_const_1)			# LN: 45 | 
273   	 0032	 80880000		call (_printf)			# LN: 45 | 
274   	 0033				cline_45_0:			/* LN: 46 | CYCLE: 0 | RULES: () */ 
275   	 0033	 886AFFFF		halfword(a0) = (0xffff)			# LN: 46 | 
276   	 0034	 800800D1		jmp (__epilogue_242)			# LN: 46 | 
277   	 0035				cline_46_0:			/* LN: 52 | CYCLE: 0 | RULES: () */ 
278   	 0035				endif_0:			/* LN: 43 | CYCLE: 0 | RULES: () */ 
279   	 0035				else_0:			/* LN: 43 | CYCLE: 0 | RULES: () */ 
280   	 0035	 90750104		i0 = i7 - (0x104)			# LN: 52 | 
281   	 0036	 B0140000		i0 = xmem[i0]			# LN: 52 | 
282   	 0037	 80880000		call (_cl_wavread_getnchannels)			# LN: 52 | 
283   	 0038	 90750105		i0 = i7 - (0x105)			# LN: 52 | 
284   	 0039	 98540000		xmem[i0] = a0h			# LN: 52 | 
285   	 003A				cline_52_0:			/* LN: 53 | CYCLE: 0 | RULES: () */ 
286   	 003A	 90750104		i0 = i7 - (0x104)			# LN: 53 | 
287   	 003B	 B0140000		i0 = xmem[i0]			# LN: 53 | 
288   	 003C	 80880000		call (_cl_wavread_bits_per_sample)			# LN: 53 | 
289   	 003D	 90750106		i0 = i7 - (0x106)			# LN: 53 | 
290   	 003E	 98540000		xmem[i0] = a0h			# LN: 53 | 
291   	 003F				cline_53_0:			/* LN: 54 | CYCLE: 0 | RULES: () */ 
292   	 003F	 90750104		i0 = i7 - (0x104)			# LN: 54 | 
293   	 0040	 B0140000		i0 = xmem[i0]			# LN: 54 | 
294   	 0041	 80880000		call (_cl_wavread_frame_rate)			# LN: 54 | 
295   	 0042	 90750107		i0 = i7 - (0x107)			# LN: 54 | 
296   	 0043	 98540000		xmem[i0] = a0h			# LN: 54 | 
297   	 0044				cline_54_0:			/* LN: 55 | CYCLE: 0 | RULES: () */ 
298   	 0044	 90750104		i0 = i7 - (0x104)			# LN: 55 | 
299   	 0045	 B0140000		i0 = xmem[i0]			# LN: 55 | 
300   	 0046	 80880000		call (_cl_wavread_number_of_frames)			# LN: 55 | 
301   	 0047	 90750108		i0 = i7 - (0x108)			# LN: 55 | 
302   	 0048	 98540000		xmem[i0] = a0h			# LN: 55 | 
303   	 0049				cline_55_0:			/* LN: 60 | CYCLE: 0 | RULES: () */ 
304   	 0049	 90750208		i0 = i7 - (520 - 0)			# LN: 60 | 
305   	 004A	 A1050000		i1 = (0) + (_string_const_2)			# LN: 60 | 
306   	 004B	 80880000		call (_strcpy)			# LN: 60 | 
307   	 004C				cline_60_0:			/* LN: 61 | CYCLE: 0 | RULES: () */ 
308   	 004C	 90750208		i0 = i7 - (520 - 0)			# LN: 61 | 
309   	 004D	 91750106		i1 = i7 - (0x106)			# LN: 61 | 
310   	 004E	 88140001		a0 = xmem[i1]			# LN: 61 | 
311   	 004F	 894A0006		uhalfword(a1) = (0x6)			# LN: 61 | 
312   	 0050	 91750107		i1 = i7 - (0x107)			# LN: 61 | 
313   	 0051	 8C140001		b0 = xmem[i1]			# LN: 61 | 
314   	 0052	 80880000		call (_cl_wavwrite_open)			# LN: 61 | 
315   	 0053	 98090030		AnyReg(i0, a0h)			# LN: 61 | 
316   	 0054	 91750209		i1 = i7 - (0x209)			# LN: 61 | 
317   	 0055	 B0540001		xmem[i1] = i0			# LN: 61 | 
318   	 0056				cline_61_0:			/* LN: 62 | CYCLE: 0 | RULES: () */ 
319   	 0056	 90750209		i0 = i7 - (0x209)			# LN: 62 | 
320   	 0057	 88140000		a0 = xmem[i0]			# LN: 62 | 
321   	 0058	 00004E80		a0 & a0			# LN: 62 | 
322   	 0059	 8448005E		if (a != 0) jmp (else_1)			# LN: 62 | 
323   	 005A				cline_62_0:			/* LN: 64 | CYCLE: 0 | RULES: () */ 
324   	 005A	 A0050000		i0 = (0) + (_string_const_3)			# LN: 64 | 
325   	 005B	 80880000		call (_printf)			# LN: 64 | 
326   	 005C				cline_64_0:			/* LN: 65 | CYCLE: 0 | RULES: () */ 
327   	 005C	 886AFFFF		halfword(a0) = (0xffff)			# LN: 65 | 
328   	 005D	 800800D1		jmp (__epilogue_242)			# LN: 65 | 
329   	 005E				cline_65_0:			/* LN: 83 | CYCLE: 0 | RULES: () */ 
330   	 005E				endif_1:			/* LN: 62 | CYCLE: 0 | RULES: () */ 
331   	 005E				else_1:			/* LN: 62 | CYCLE: 0 | RULES: () */ 
332   	 005E	 90750108		i0 = i7 - (0x108)			# LN: 83 | 
333   	 005F	 88140000		a0 = xmem[i0]			# LN: 83 | 
334   	 0060	 894A0010		uhalfword(a1) = (0x10)			# LN: 83 | 
335   	 0061	 80880000		call (__div)			# LN: 83 | 
336   	 0062	 9075020A		i0 = i7 - (0x20a)			# LN: 83 | 
337   	 0063	 98540000		xmem[i0] = a0h			# LN: 83 | 
338   	 0064				cline_83_0:			/* LN: 85 | CYCLE: 0 | RULES: () */ 
339   	 0064	 9075020B		i0 = i7 - (0x20b)			# LN: 85 | 
340   	 0065	 00004DC0		a0 = 0			# LN: 85 | 
341   	 0066	 98540000		xmem[i0] = a0h			# LN: 85 | 
342   	 0067				for_2:			/* LN: 85 | CYCLE: 0 | RULES: () */ 
343   	 0067	 9075020B		i0 = i7 - (0x20b)			# LN: 85 | 
344   	 0068	 88140000		a0 = xmem[i0]			# LN: 85 | 
345   	 0069	 9075020A		i0 = i7 - (0x20a)			# LN: 85 | 
346   	 006A	 89140000		a1 = xmem[i0]			# LN: 85 | 
347   	 006B	 00004F08		a0 - a1			# LN: 85 | 
348   	 006C	 84C800C9		if (a >= 0) jmp (for_end_2)			# LN: 85 | 
349   	 006D				cline_85_0:			/* LN: 87 | CYCLE: 0 | RULES: () */ 
350   	 006D	 9075020C		i0 = i7 - (0x20c)			# LN: 87 | 
351   	 006E	 00004DC0		a0 = 0			# LN: 87 | 
352   	 006F	 98540000		xmem[i0] = a0h			# LN: 87 | 
353   	 0070	 81000098		do (0x10), label_end_94			# LN: 87 | 
354   	 0071				cline_87_0:			/* LN: 89 | CYCLE: 0 | RULES: () */ 
355   	 0071				label_begin_94:			/* LN: 87 | CYCLE: 0 | RULES: () */ 
356   	 0071	 9075020D		i0 = i7 - (0x20d)			# LN: 89 | 
357   	 0072	 00004DC0		a0 = 0			# LN: 89 | 
358   	 0073	 98540000		xmem[i0] = a0h			# LN: 89 | 
359   	 0074				for_4:			/* LN: 89 | CYCLE: 0 | RULES: () */ 
360   	 0074	 9075020D		i0 = i7 - (0x20d)			# LN: 89 | 
361   	 0075	 88140000		a0 = xmem[i0]			# LN: 89 | 
362   	 0076	 90750105		i0 = i7 - (0x105)			# LN: 89 | 
363   	 0077	 89140000		a1 = xmem[i0]			# LN: 89 | 
364   	 0078	 00004F08		a0 - a1			# LN: 89 | 
365   	 0079	 84C80093		if (a >= 0) jmp (for_end_4)			# LN: 89 | 
366   	 007A				cline_89_0:			/* LN: 91 | CYCLE: 0 | RULES: () */ 
367   	 007A	 90750104		i0 = i7 - (0x104)			# LN: 91 | 
368   	 007B	 B0140000		i0 = xmem[i0]			# LN: 91 | 
369   	 007C	 80880000		call (_cl_wavread_recvsample)			# LN: 91 | 
370   	 007D	 9075020E		i0 = i7 - (0x20e)			# LN: 91 | 
371   	 007E	 98540000		xmem[i0] = a0h			# LN: 91 | 
372   	 007F				cline_91_0:			/* LN: 92 | CYCLE: 0 | RULES: () */ 
373   	 007F	 9075020D		i0 = i7 - (0x20d)			# LN: 92 | 
374   	 0080	 88140000		a0 = xmem[i0]			# LN: 92 | 
375   	 0081	 00004EC0		a0 = a0 << 4			# LN: 92 | 
376   	 0082	 48707FFF		i0 = a0			# LN: 92 | 
377   	 0083	 9175020C		i1 = i7 - (0x20c)			# LN: 92 | 
378   	 0084	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 92 | 
379   	 0085	 88140001		a0 = xmem[i1]			# LN: 92 | 
380   	 0086	 09707FFF		a1 = i0			# LN: 92 | 
381   	 0087	 00004480		a0 = a1 + a0			# LN: 92 | 
382   	 0088	 98090030		AnyReg(i0, a0h)			# LN: 92 | 
383   	 0089	 9175020E		i1 = i7 - (0x20e)			# LN: 92 | 
384   	 008A	 88140001		a0 = xmem[i1]			# LN: 92 | 
385   	 008B	 98D40000		ymem[i0] = a0h			# LN: 92 | 
386   	 008C				cline_92_0:			/* LN: 89 | CYCLE: 0 | RULES: () */ 
387   	 008C				init_latch_label_2:			/* LN: 93 | CYCLE: 0 | RULES: () */ 
388   	 008C	 9075020D		i0 = i7 - (0x20d)			# LN: 89 | 
389   	 008D	 88140000		a0 = xmem[i0]			# LN: 89 | 
390   	 008E	 894A0001		uhalfword(a1) = (0x1)			# LN: 89 | 
391   	 008F	 00004408		a0 = a0 + a1			# LN: 89 | 
392   	 0090	 9075020D		i0 = i7 - (0x20d)			# LN: 89 | 
393   	 0091	 98540000		xmem[i0] = a0h			# LN: 89 | 
394   	 0092	 80080074		jmp (for_4)			# LN: 89 | 
395   	 0093				cline_89_1:			/* LN: 87 | CYCLE: 0 | RULES: () */ 
396   	 0093				init_latch_label_3:			/* LN: 94 | CYCLE: 0 | RULES: () */ 
397   	 0093				for_end_4:			/* LN: 89 | CYCLE: 0 | RULES: () */ 
398   	 0093	 9075020C		i0 = i7 - (0x20c)			# LN: 87 | 
399   	 0094	 88140000		a0 = xmem[i0]			# LN: 87 | 
400   	 0095	 894A0001		uhalfword(a1) = (0x1)			# LN: 87 | 
401   	 0096	 00004408		a0 = a0 + a1			# LN: 87 | 
402   	 0097	 9075020C		i0 = i7 - (0x20c)			# LN: 87 | 
403   	 0098				label_end_94:			# LN: 87 | CYCLE: 5 | RULES: ()
404   	 0098	 98540000		xmem[i0] = a0h			# LN: 87 | 
405   	 0099				cline_87_1:			/* LN: 100 | CYCLE: 0 | RULES: () */ 
406   	 0099				for_end_3:			/* LN: 87 | CYCLE: 0 | RULES: () */ 
407   	 0099	 A0050000		i0 = (0) + (_sampleBuffer)			# LN: 100 | 
408   	 009A	 A1050000		i1 = (0) + (_outputSampleBuffer)			# LN: 100 | 
409   	 009B	 80880000		call (_processing)			# LN: 100 | 
410   	 009C				cline_100_0:			/* LN: 104 | CYCLE: 0 | RULES: () */ 
411   	 009C	 9075020C		i0 = i7 - (0x20c)			# LN: 104 | 
412   	 009D	 00004DC0		a0 = 0			# LN: 104 | 
413   	 009E	 98540000		xmem[i0] = a0h			# LN: 104 | 
414   	 009F	 810000C1		do (0x10), label_end_96			# LN: 104 | 
415   	 00A0				cline_104_0:			/* LN: 106 | CYCLE: 0 | RULES: () */ 
416   	 00A0				label_begin_96:			/* LN: 104 | CYCLE: 0 | RULES: () */ 
417   	 00A0	 9075020D		i0 = i7 - (0x20d)			# LN: 106 | 
418   	 00A1	 00004DC0		a0 = 0			# LN: 106 | 
419   	 00A2	 98540000		xmem[i0] = a0h			# LN: 106 | 
420   	 00A3	 806000BB		do (0x6), label_end_95			# LN: 106 | 
421   	 00A4				cline_106_0:			/* LN: 108 | CYCLE: 0 | RULES: () */ 
422   	 00A4				label_begin_95:			/* LN: 106 | CYCLE: 0 | RULES: () */ 
423   	 00A4	 9075020D		i0 = i7 - (0x20d)			# LN: 108 | 
424   	 00A5	 88140000		a0 = xmem[i0]			# LN: 108 | 
425   	 00A6	 00004EC0		a0 = a0 << 4			# LN: 108 | 
426   	 00A7	 48707FFF		i0 = a0			# LN: 108 | 
427   	 00A8	 9175020C		i1 = i7 - (0x20c)			# LN: 108 | 
428   	 00A9	 80050000		i0 = i0 + (_outputSampleBuffer + 0)			# LN: 108 | 
429   	 00AA	 88140001		a0 = xmem[i1]			# LN: 108 | 
430   	 00AB	 09707FFF		a1 = i0			# LN: 108 | 
431   	 00AC	 00004480		a0 = a1 + a0			# LN: 108 | 
432   	 00AD	 98090030		AnyReg(i0, a0h)			# LN: 108 | 
433   	 00AE	 9175020E		i1 = i7 - (0x20e)			# LN: 108 | 
434   	 00AF	 88140000		a0 = xmem[i0]			# LN: 108 | 
435   	 00B0	 98540001		xmem[i1] = a0h			# LN: 108 | 
436   	 00B1				cline_108_0:			/* LN: 109 | CYCLE: 0 | RULES: () */ 
437   	 00B1	 90750209		i0 = i7 - (0x209)			# LN: 109 | 
438   	 00B2	 9175020E		i1 = i7 - (0x20e)			# LN: 109 | 
439   	 00B3	 88140001		a0 = xmem[i1]			# LN: 109 | 
440   	 00B4	 B0140000		i0 = xmem[i0]			# LN: 109 | 
441   	 00B5	 80880000		call (_cl_wavwrite_sendsample)			# LN: 109 | 
442   	 00B6				cline_109_0:			/* LN: 106 | CYCLE: 0 | RULES: () */ 
443   	 00B6				init_latch_label_4:			/* LN: 110 | CYCLE: 0 | RULES: () */ 
444   	 00B6	 9075020D		i0 = i7 - (0x20d)			# LN: 106 | 
445   	 00B7	 88140000		a0 = xmem[i0]			# LN: 106 | 
446   	 00B8	 894A0001		uhalfword(a1) = (0x1)			# LN: 106 | 
447   	 00B9	 00004408		a0 = a0 + a1			# LN: 106 | 
448   	 00BA	 9075020D		i0 = i7 - (0x20d)			# LN: 106 | 
449   	 00BB				label_end_95:			# LN: 106 | CYCLE: 5 | RULES: ()
450   	 00BB	 98540000		xmem[i0] = a0h			# LN: 106 | 
451   	 00BC				cline_106_1:			/* LN: 104 | CYCLE: 0 | RULES: () */ 
452   	 00BC				init_latch_label_5:			/* LN: 111 | CYCLE: 0 | RULES: () */ 
453   	 00BC				for_end_6:			/* LN: 106 | CYCLE: 0 | RULES: () */ 
454   	 00BC	 9075020C		i0 = i7 - (0x20c)			# LN: 104 | 
455   	 00BD	 88140000		a0 = xmem[i0]			# LN: 104 | 
456   	 00BE	 894A0001		uhalfword(a1) = (0x1)			# LN: 104 | 
457   	 00BF	 00004408		a0 = a0 + a1			# LN: 104 | 
458   	 00C0	 9075020C		i0 = i7 - (0x20c)			# LN: 104 | 
459   	 00C1				label_end_96:			# LN: 104 | CYCLE: 5 | RULES: ()
460   	 00C1	 98540000		xmem[i0] = a0h			# LN: 104 | 
461   	 00C2				cline_104_1:			/* LN: 85 | CYCLE: 0 | RULES: () */ 
462   	 00C2				init_latch_label_6:			/* LN: 112 | CYCLE: 0 | RULES: () */ 
463   	 00C2				for_end_5:			/* LN: 104 | CYCLE: 0 | RULES: () */ 
464   	 00C2	 9075020B		i0 = i7 - (0x20b)			# LN: 85 | 
465   	 00C3	 88140000		a0 = xmem[i0]			# LN: 85 | 
466   	 00C4	 894A0001		uhalfword(a1) = (0x1)			# LN: 85 | 
467   	 00C5	 00004408		a0 = a0 + a1			# LN: 85 | 
468   	 00C6	 9075020B		i0 = i7 - (0x20b)			# LN: 85 | 
469   	 00C7	 98540000		xmem[i0] = a0h			# LN: 85 | 
470   	 00C8	 80080067		jmp (for_2)			# LN: 85 | 
471   	 00C9				cline_85_1:			/* LN: 117 | CYCLE: 0 | RULES: () */ 
472   	 00C9				for_end_2:			/* LN: 85 | CYCLE: 0 | RULES: () */ 
473   	 00C9	 90750104		i0 = i7 - (0x104)			# LN: 117 | 
474   	 00CA	 B0140000		i0 = xmem[i0]			# LN: 117 | 
475   	 00CB	 80880000		call (_cl_wavread_close)			# LN: 117 | 
476   	 00CC				cline_117_0:			/* LN: 118 | CYCLE: 0 | RULES: () */ 
477   	 00CC	 90750209		i0 = i7 - (0x209)			# LN: 118 | 
478   	 00CD	 B0140000		i0 = xmem[i0]			# LN: 118 | 
479   	 00CE	 80880000		call (_cl_wavwrite_close)			# LN: 118 | 
480   	 00CF				cline_118_0:			/* LN: 121 | CYCLE: 0 | RULES: () */ 
481   	 00CF	 00004DC0		a0 = 0			# LN: 121 | 
482   	 00D0	 800800D1		jmp (__epilogue_242)			# LN: 121 | 
483   	 00D1				cline_121_0:			/* LN: 122 | CYCLE: 0 | RULES: () */ 
484   	 00D1				__epilogue_242:			/* LN: 122 | CYCLE: 0 | RULES: () */ 
485   	 00D1	 9775020E		i7 = i7 - (0x20e)			# LN: 122 | 
486   	 00D2	 02177FFF		i7 -= 1			# LN: 122 | 
487   	 00D3	 81880000		ret			# LN: 122 | 
488   						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           					 Define                 "a"
_InputGain                                                                      			  Public Relocatable       main_GEN_0000:0000H
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_MUI_VERSION_                                                                   					 Define                 "020000"
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
__div                                                                           					 External   
__epilogue_242                                                                  			         Relocatable         main_GEN_0009:00D1H
__start                                                                         					 External   
_cl_wavread_bits_per_sample                                                     					 External   
_cl_wavread_close                                                               					 External   
_cl_wavread_frame_rate                                                          					 External   
_cl_wavread_getnchannels                                                        					 External   
_cl_wavread_number_of_frames                                                    					 External   
_cl_wavread_open                                                                					 External   
_cl_wavread_recvsample                                                          					 External   
_cl_wavwrite_close                                                              					 External   
_cl_wavwrite_open                                                               					 External   
_cl_wavwrite_sendsample                                                         					 External   
_history_global                                                                 			  Public Relocatable       main_GEN_0001:0000H
_main                                                                           			  Public Relocatable       main_GEN_0009:0000H
_outputSampleBuffer                                                             			  Public Relocatable       main_GEN_0002:0000H
_p_state_global                                                                 			  Public Relocatable       main_GEN_0003:0000H
_printf                                                                         					 External   
_processing                                                                     					 External   
_sampleBuffer                                                                   			  Public Relocatable       main_GEN_0004:0000H
_strcpy                                                                         					 External   
_string_const_0                                                                 			         Relocatable         main_GEN_0005:0000H
_string_const_1                                                                 			         Relocatable         main_GEN_0006:0000H
_string_const_2                                                                 			         Relocatable         main_GEN_0007:0000H
_string_const_3                                                                 			         Relocatable         main_GEN_0008:0000H
cline_100_0                                                                     			  Unused Relocatable        main_GEN_0009:009CH
cline_104_0                                                                     			  Unused Relocatable        main_GEN_0009:00A0H
cline_104_1                                                                     			  Unused Relocatable        main_GEN_0009:00C2H
cline_106_0                                                                     			  Unused Relocatable        main_GEN_0009:00A4H
cline_106_1                                                                     			  Unused Relocatable        main_GEN_0009:00BCH
cline_108_0                                                                     			  Unused Relocatable        main_GEN_0009:00B1H
cline_109_0                                                                     			  Unused Relocatable        main_GEN_0009:00B6H
cline_117_0                                                                     			  Unused Relocatable        main_GEN_0009:00CCH
cline_118_0                                                                     			  Unused Relocatable        main_GEN_0009:00CFH
cline_121_0                                                                     			  Unused Relocatable        main_GEN_0009:00D1H
cline_20_0                                                                      			  Unused Relocatable        main_GEN_0009:0007H
cline_34_0                                                                      			  Unused Relocatable        main_GEN_0009:0014H
cline_35_0                                                                      			  Unused Relocatable        main_GEN_0009:0021H
cline_36_0                                                                      			  Unused Relocatable        main_GEN_0009:0023H
cline_37_0                                                                      			  Unused Relocatable        main_GEN_0009:0025H
cline_41_0                                                                      			  Unused Relocatable        main_GEN_0009:0028H
cline_42_0                                                                      			  Unused Relocatable        main_GEN_0009:002DH
cline_43_0                                                                      			  Unused Relocatable        main_GEN_0009:0031H
cline_45_0                                                                      			  Unused Relocatable        main_GEN_0009:0033H
cline_46_0                                                                      			  Unused Relocatable        main_GEN_0009:0035H
cline_52_0                                                                      			  Unused Relocatable        main_GEN_0009:003AH
cline_53_0                                                                      			  Unused Relocatable        main_GEN_0009:003FH
cline_54_0                                                                      			  Unused Relocatable        main_GEN_0009:0044H
cline_55_0                                                                      			  Unused Relocatable        main_GEN_0009:0049H
cline_60_0                                                                      			  Unused Relocatable        main_GEN_0009:004CH
cline_61_0                                                                      			  Unused Relocatable        main_GEN_0009:0056H
cline_62_0                                                                      			  Unused Relocatable        main_GEN_0009:005AH
cline_64_0                                                                      			  Unused Relocatable        main_GEN_0009:005CH
cline_65_0                                                                      			  Unused Relocatable        main_GEN_0009:005EH
cline_83_0                                                                      			  Unused Relocatable        main_GEN_0009:0064H
cline_85_0                                                                      			  Unused Relocatable        main_GEN_0009:006DH
cline_85_1                                                                      			  Unused Relocatable        main_GEN_0009:00C9H
cline_87_0                                                                      			  Unused Relocatable        main_GEN_0009:0071H
cline_87_1                                                                      			  Unused Relocatable        main_GEN_0009:0099H
cline_89_0                                                                      			  Unused Relocatable        main_GEN_0009:007AH
cline_89_1                                                                      			  Unused Relocatable        main_GEN_0009:0093H
cline_91_0                                                                      			  Unused Relocatable        main_GEN_0009:007FH
cline_92_0                                                                      			  Unused Relocatable        main_GEN_0009:008CH
dummy                                                                           			  Unused Number				     0 (0H)
else_0                                                                          			         Relocatable         main_GEN_0009:0035H
else_1                                                                          			         Relocatable         main_GEN_0009:005EH
endif_0                                                                         			  Unused Relocatable        main_GEN_0009:0035H
endif_1                                                                         			  Unused Relocatable        main_GEN_0009:005EH
for_2                                                                           			         Relocatable         main_GEN_0009:0067H
for_4                                                                           			         Relocatable         main_GEN_0009:0074H
for_end_0                                                                       			  Unused Relocatable        main_GEN_0009:0014H
for_end_1                                                                       			  Unused Relocatable        main_GEN_0009:0021H
for_end_2                                                                       			         Relocatable         main_GEN_0009:00C9H
for_end_3                                                                       			  Unused Relocatable        main_GEN_0009:0099H
for_end_4                                                                       			         Relocatable         main_GEN_0009:0093H
for_end_5                                                                       			  Unused Relocatable        main_GEN_0009:00C2H
for_end_6                                                                       			  Unused Relocatable        main_GEN_0009:00BCH
init_latch_label_0                                                              			  Unused Relocatable        main_GEN_0009:000EH
init_latch_label_1                                                              			  Unused Relocatable        main_GEN_0009:001BH
init_latch_label_2                                                              			  Unused Relocatable        main_GEN_0009:008CH
init_latch_label_3                                                              			  Unused Relocatable        main_GEN_0009:0093H
init_latch_label_4                                                              			  Unused Relocatable        main_GEN_0009:00B6H
init_latch_label_5                                                              			  Unused Relocatable        main_GEN_0009:00BCH
init_latch_label_6                                                              			  Unused Relocatable        main_GEN_0009:00C2H
label_begin_92                                                                  			  Unused Relocatable        main_GEN_0009:000CH
label_begin_93                                                                  			  Unused Relocatable        main_GEN_0009:0019H
label_begin_94                                                                  			  Unused Relocatable        main_GEN_0009:0071H
label_begin_95                                                                  			  Unused Relocatable        main_GEN_0009:00A4H
label_begin_96                                                                  			  Unused Relocatable        main_GEN_0009:00A0H
label_end_92                                                                    			         Relocatable         main_GEN_0009:0013H
label_end_93                                                                    			         Relocatable         main_GEN_0009:0020H
label_end_94                                                                    			         Relocatable         main_GEN_0009:0098H
label_end_95                                                                    			         Relocatable         main_GEN_0009:00BBH
label_end_96                                                                    			         Relocatable         main_GEN_0009:00C1H

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0001H	 main_GEN_0000                           			 X_OVLY                                  
0100H	 main_GEN_0001                           			 X_OVLY                                  
0080H	 main_GEN_0002                           			 X_OVLY                                  
0002H	 main_GEN_0003                           			 X_OVLY                                  
0080H	 main_GEN_0004                           			 Y_OVLY                                  
0023H	 main_GEN_0005                           			 X_OVLY                                  
0027H	 main_GEN_0006                           			 X_OVLY                                  
001FH	 main_GEN_0007                           			 X_OVLY                                  
0028H	 main_GEN_0008                           			 X_OVLY                                  
00D4H	 main_GEN_0009                           			 CODE_OVLY                               
