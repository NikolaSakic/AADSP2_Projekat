#include "common.h"



DSPfract sampleBuffer[MAX_NUM_CHANNEL][BLOCK_SIZE];
DSPfract outputSampleBuffer[MAX_NUM_CHANNEL][BLOCK_SIZE];

ENABLE_STATE enable;
OUTPUT_MODE outputMode;
DSPint InputGain;




void processing()
{
	/* 10^(-4/20) */
	DSPfract gain = 0.63095735;
	//DSPfract gain = FRACT_NUM(pow(10.0, InputGain/20.0));
	//gain = gain >> 1;

	unsigned int p_state1 = 0;
	unsigned int p_state2 = 0;
	DSPaccum tmp;

	DSPfract history1[n_coeff];
	DSPfract history2[n_coeff];

	int i, j;
	for(i=0; i < n_coeff; i++){ history1[i] = FRACT_NUM(0.0);}
	for(i=0; i < n_coeff; i++){ history2[i] = FRACT_NUM(0.0);}
	

	if(enable == ON && outputMode == MOD3_2_1)
	{
		for(j=0; j<BLOCK_SIZE; j++)
		{
			sampleBuffer[0][j] = sampleBuffer[0][j] * gain;
			sampleBuffer[1][j] = sampleBuffer[1][j] * gain;
			/*
			pOutbuf[3][j] = fir_circular(pInbuf[0][j], FIRCoef, history1, Ntap, &p_state1);			//Ls
            pOutbuf[0][j] = pInbuf[0][j];															//L
            pOutbuf[1][j] = pInbuf[0][j] + pInbuf[1][j];											//C
            pOutbuf[2][j] = pInbuf[1][j];															//R
            pOutbuf[4][j] = fir_circular(pInbuf[1][j], FIRCoef, history2, Ntap, &p_state2);			//Rs
            pOutbuf[5][j] = pOutbuf[4][j] + pOutbuf[3][j];											//LFE
			*/
			
			outputSampleBuffer[0][j] = fir_circular(sampleBuffer[0][j], history1, &p_state1);			
			outputSampleBuffer[1][j] = sampleBuffer[0][j];
			outputSampleBuffer[2][j] = sampleBuffer[0][j] + sampleBuffer[1][j];
			outputSampleBuffer[3][j] = sampleBuffer[1][j];
			outputSampleBuffer[4][j] = fir_circular(sampleBuffer[1][j], history2, &p_state2);
			outputSampleBuffer[5][j] = outputSampleBuffer[4][j] + outputSampleBuffer[0][j];

		}
	}
	if(enable == ON && outputMode == MOD2_2_0)
	{
		for(j=0; j<BLOCK_SIZE; j++)
		{
			sampleBuffer[0][j] = sampleBuffer[0][j] * gain;
			sampleBuffer[1][j] = sampleBuffer[1][j] * gain;
		    /*
			pOutbuf[3][j] = fir_circular(pInbuf[0][j], FIRCoef, history1, Ntap, &p_state1);         //Ls
            pOutbuf[0][j] = pInbuf[0][j];                                                           //L
            pOutbuf[2][j] = pInbuf[1][j];                                                           //R
            pOutbuf[4][j] = fir_circular(pInbuf[1][j], FIRCoef, history2, Ntap, &p_state2);         //Rs
			*/
			
			outputSampleBuffer[0][j] = fir_circular(sampleBuffer[0][j], history1, &p_state1);
			outputSampleBuffer[1][j] = sampleBuffer[0][j];
			outputSampleBuffer[2][j] = sampleBuffer[1][j];
			outputSampleBuffer[3][j] = fir_circular(sampleBuffer[1][j], history2, &p_state2);
			
		}
	}
	if(enable == OFF || outputMode == MOD2_0_0)
	{
		for(j=0; j<BLOCK_SIZE; j++)
		{
			sampleBuffer[0][j] = sampleBuffer[1][j] * gain;
			sampleBuffer[1][j] = sampleBuffer[1][j] * gain;
			/*
			pOutbuf[0][j] = pInbuf[0][j];        //L
            pOutbuf[2][j] = pInbuf[1][j];        //R
			*/
			
			outputSampleBuffer[1][j] = sampleBuffer[0][j];
			outputSampleBuffer[2][j] = sampleBuffer[1][j];
			
		}

	}
	
}

DSPint main(int argc, char* argv[])
{
		WAVREAD_HANDLE *wav_in;
		WAVWRITE_HANDLE *wav_out;

		char WavInputName[256];
		char WavOutputName[256];

	    int nChannels;
		int bitsPerSample;
	    int sampleRate;
	    int iNumSamples;

		// Open input wav file
		//-------------------------------------------------
		strcpy(WavInputName,argv[1]);
		wav_in = cl_wavread_open(WavInputName);
		if(wav_in == NULL)
	    {
	        printf("Error: Could not open input wavefile.\n");
	        return -1;
	    }
		//-------------------------------------------------

		// Read input wav header
		//-------------------------------------------------
		nChannels = cl_wavread_getnchannels(wav_in);
	    bitsPerSample = cl_wavread_bits_per_sample(wav_in);
	    sampleRate = cl_wavread_frame_rate(wav_in);
	    iNumSamples =  cl_wavread_number_of_frames(wav_in);
		//-------------------------------------------------

		// Open output wav file
		//-------------------------------------------------
		strcpy(WavOutputName,argv[2]);
		wav_out = cl_wavwrite_open(WavOutputName, bitsPerSample, nChannels, sampleRate);
		if(!wav_out)
	    {
	        printf("Error: Could not open output wavefile.\n");
	        return -1;
	    }
		//-------------------------------------------------


		// Initialize echo
		//-------------------------------------------------
		processing();
		//-------------------------------------------------


		// Processing loop
		//-------------------------------------------------
	    {
			int i;
			int j;
			int k;
			int sample;
			int bound = iNumSamples/BLOCK_SIZE;

			for(i=0; i< bound; i++)
			{
				for(j=0; j<BLOCK_SIZE; j++)
				{
					for(k=0; k<nChannels; k++)
					{
						sample = cl_wavread_recvsample(wav_in);
						sampleBuffer[k][j] = rbits(sample);
					}
				}

				// Do processing...
				// Your code here...
				// Initialize echo
				//-------------------------------------------------
				multitap_echo(sampleBuffer[0], sampleBuffer[0]);
				//-------------------------------------------------

				for(j=0; j<BLOCK_SIZE; j++)
				{
					for(k=0; k<nChannels; k++)
					{
						sample = bitsr(sampleBuffer[k][j]);
						cl_wavwrite_sendsample(wav_out, sample);
					}
				}
			}
		}

		// Close files
		//-------------------------------------------------
	    cl_wavread_close(wav_in);
	    cl_wavwrite_close(wav_out);
		//-------------------------------------------------

	    return 0;
}
